"use strict";(self.webpackChunkmutoid_website=self.webpackChunkmutoid_website||[]).push([[46],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,f=m["".concat(u,".").concat(d)]||m[d]||c[d]||o;return r?n.createElement(f,s(s({ref:t},l),{},{components:r})):n.createElement(f,s({ref:t},l))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3897:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return l},default:function(){return m}});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),s=["components"],i={sidebar_label:"Resource",sidebar_position:2},u="Resource",p={unversionedId:"modules/http/resource",id:"modules/http/resource",isDocsHomePage:!1,title:"Resource",description:"`ts",source:"@site/docs/02-modules/01-http/02-resource.md",sourceDirName:"02-modules/01-http",slug:"/modules/http/resource",permalink:"/mutoid/docs/modules/http/resource",editUrl:"https://github.com/facile-it/mutoid/edit/master/website/docs/02-modules/01-http/02-resource.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Resource",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Data fetching",permalink:"/mutoid/docs/modules/http/data-fetching"},next:{title:"Fetch factory & cache",permalink:"/mutoid/docs/modules/http/fetch-factory-and-cache"}},l=[{value:"Resource",id:"resource-1",children:[]},{value:"Constructors",id:"constructors",children:[{value:"fromAjax",id:"fromajax",children:[]}]},{value:"Destructors",id:"destructors",children:[{value:"match (Resource)",id:"match-resource",children:[]},{value:"matchD (Resource)",id:"matchd-resource",children:[]},{value:"toMutationEffect (ReaderObservableResource, ObservableResource)",id:"tomutationeffect-readerobservableresource-observableresource",children:[]}]}],c={toc:l};function m(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"resource"},"Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import * as RES from 'mutoid/http/Resource'\nimport * as OR from 'mutoid/http/ObservableResource'\nimport * as ROR from 'mutoid/http/ReaderObservableResource'\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"ReaderObservableResource"),", ",(0,o.kt)("strong",{parentName:"p"},"ObservableResource"),", ",(0,o.kt)("strong",{parentName:"p"},"Resource")," are three data structures that implement an instance of ",(0,o.kt)("em",{parentName:"p"},"Functor"),", ",(0,o.kt)("em",{parentName:"p"},"Apply"),", ",(0,o.kt)("em",{parentName:"p"},"Bifunctor"),", ",(0,o.kt)("em",{parentName:"p"},"Applicative"),", ",(0,o.kt)("em",{parentName:"p"},"Monad")," (and ",(0,o.kt)("em",{parentName:"p"},"MonadObservable")," for ",(0,o.kt)("em",{parentName:"p"},"ObservableResource")," and ",(0,o.kt)("em",{parentName:"p"},"ReaderObservableResource"),")."),(0,o.kt)("p",null,"All modules have the same structure (more or less) as a ",(0,o.kt)("inlineCode",{parentName:"p"},"fp-ts")," module:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"constructor"),(0,o.kt)("li",{parentName:"ul"},"destructors"),(0,o.kt)("li",{parentName:"ul"},"combinators"),(0,o.kt)("li",{parentName:"ul"},"type class members"),(0,o.kt)("li",{parentName:"ul"},"instances")),(0,o.kt)("h2",{id:"resource-1"},"Resource"),(0,o.kt)("p",null,"Resource, that is the basic data structures, is a sum type that represents all possible cases of async provisioning of data."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"ResourceInit"),": nothing happened"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"ResourceSubmitted"),": the asynchronous request has started"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"ResourceDone"),": the asynchronous request ",(0,o.kt)("strong",{parentName:"li"},"has")," terminated in an ",(0,o.kt)("strong",{parentName:"li"},"expected state")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"ResourceFail"),": the asynchronous request ",(0,o.kt)("strong",{parentName:"li"},"hasn't")," terminated in an ",(0,o.kt)("strong",{parentName:"li"},"expected state"))),(0,o.kt)("h2",{id:"constructors"},"Constructors"),(0,o.kt)("p",null,"There are some classic constructors and some helper constructors from data structure ",(0,o.kt)("inlineCode",{parentName:"p"},"IO"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Task"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Either"),", etc.."),(0,o.kt)("h3",{id:"fromajax"},"fromAjax"),(0,o.kt)("p",null,"One of the most important and (hopefully) useful constructor implemented in ",(0,o.kt)("em",{parentName:"p"},"ReaderObservableResource")," and ",(0,o.kt)("em",{parentName:"p"},"ObservableResource"),"."),(0,o.kt)("p",null,"The inputs are ",(0,o.kt)("strong",{parentName:"p"},"ObservableAjax")," and ",(0,o.kt)("strong",{parentName:"p"},"ResourceDecoders"),"."),(0,o.kt)("p",null,">","> ",(0,o.kt)("inlineCode",{parentName:"p"},"ObservableAjax")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import * as RES from 'mutoid/http/Resource'\nimport { AjaxError } from 'rxjs/ajax'\nimport { Observable } from 'rxjs'\n\ntype ObservableAjax<AE = never> = Observable<AjaxResponse | RES.ResourceAjaxFail<AE>>\n")),(0,o.kt)("p",null,"Where:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AjaxResponse")," is a normalized response from an AJAX request ",(0,o.kt)("a",{parentName:"li",href:"https://rxjs-dev.firebaseapp.com/api/ajax/AjaxResponse"},"defined in rxjs")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ResourceAjaxFail")," is a sum type defined with two cases ",(0,o.kt)("inlineCode",{parentName:"li"},"unknownError")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"appError")," (you can find a constructor in ",(0,o.kt)("em",{parentName:"li"},"Resource"),")")),(0,o.kt)("p",null,">","> ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceDecoders")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Either } from 'fp-ts/Either'\nimport { StatusCode } from 'mutoid/http/statusCode'\n\ntype ResourceDecoders = { [k in StatusCode]?: (i: unknown) => Either<unknown, unknown> }\n")),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"io-ts")," to easily build the decoders."),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import * as t from 'io-ts'\nimport { ajax } from 'rxjs/ajax'\nimport * as ROR from 'mutoid/http/ReaderObservableResource'\nimport * as OR from 'mutoid/http/ObservableResource'\nimport * as RES from 'mutoid/http/Resource'\nimport { pipe } from 'fp-ts/function'\n\nexport interface Deps {\n    ajax: typeof ajax\n}\n\nexport const somethingDecoders = {\n    200: t.array(t.string).decode,\n    400: t.string.decode,\n}\n\ntype somethingResource = RES.ResourceTypeOf<typeof somethingDecoders>\n\nconst fetchSomething = (id: number, from: string) => (deps: Deps) =>\n    OR.fromAjax(deps.ajax(`https://api.io?id=${id}&from=${from}`), somethingDecoders)\n\n// or\n\nexport const fetchSomething = (id: number, from: string) =>\n    pipe(\n        ROR.askTypeOf<Deps, typeof somethingDecoders>(),\n        ROR.chainW(deps =>\n            ROR.fromAjax(\n                deps.ajax(`https://ron-swanson-quotes.herokuapp.com/v2/quotes?id=${id}&from=${from}`),\n                somethingDecoders\n            )\n        )\n    )\n")),(0,o.kt)("p",null,"When you use ",(0,o.kt)("inlineCode",{parentName:"p"},"fromAjax"),", you consider every status code in the decoder dictionary as a ",(0,o.kt)("inlineCode",{parentName:"p"},"Done")," case."),(0,o.kt)("p",null,"In that case, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Done")," resource data is described by a sum type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface ResourceData<S, P> {\n    readonly status: S\n    readonly payload: P\n}\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("em",{parentName:"p"},"status")," and ",(0,o.kt)("em",{parentName:"p"},"payload")," are inferred from your decoder dictionary."),(0,o.kt)("p",null,"The fail resource data, instead, is described by a sum type that has (4+1) cases:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"unknownError")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"decodeError")," errors are inferred from your decoder dictionary"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"networkError")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"unexpectedResponse")," all status code that you don't specify in decoder dictionary"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"appError")," inferred if you specify that")),(0,o.kt)("p",null,"Here are some examples:"),(0,o.kt)("p",null,"1 - simple fetch with token in store: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facile-it/mutoid/blob/pre_release_04/example/resources/quoteResource.ts#L23"},"example"),(0,o.kt)("br",{parentName:"p"}),"\n","2 - fetch in series: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facile-it/mutoid/blob/pre_release_04/example/resources/quoteResource.ts#L42"},"example"),(0,o.kt)("br",{parentName:"p"}),"\n","3 - fetch in parallel: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facile-it/mutoid/blob/pre_release_04/example/resources/quoteResource.ts#L54"},"example")),(0,o.kt)("h2",{id:"destructors"},"Destructors"),(0,o.kt)("h3",{id:"match-resource"},"match (Resource)"),(0,o.kt)("p",null,"This destructor takes 4 functions for each case: ",(0,o.kt)("inlineCode",{parentName:"p"},"onInit"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"onSubmitted"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"onDone"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"onFail"),"."),(0,o.kt)("h3",{id:"matchd-resource"},"matchD (Resource)"),(0,o.kt)("p",null,"This destructor is very similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"match"),", but it works with different inputs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    onInit: () => R\n    onSubmitted: () => R\n    onDone: (r: A) => R\n    onFail: (r: E) => R\n}\n\n// or\n\n{\n    onPending: () => R\n    onDone: (r: A) => R\n    onFail: (r: E) => R\n}\n")),(0,o.kt)("h3",{id:"tomutationeffect-readerobservableresource-observableresource"},"toMutationEffect (ReaderObservableResource, ObservableResource)"),(0,o.kt)("p",null,"This destructor is useful when you want to update a store after an asynchronous request.\nIt can be implemented in ",(0,o.kt)("em",{parentName:"p"},"ReaderObservableResource")," and ",(0,o.kt)("em",{parentName:"p"},"ObservableResource"),"."),(0,o.kt)("p",null,"In ",(0,o.kt)("em",{parentName:"p"},"ObservableResource"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { map } from 'rxjs/operators'\nimport * as OR from 'mutoid/http/ObservableResource'\nimport * as MS from 'mutoid/state'\n\ntype fetchQuoteMutationWithParams = () => MS.Mutation<\n    'fetchSomethingMutation',\n    [id: number, from: string],\n    QuoteState,\n    QuoteState\n>\n\nexport const fetchQuoteMutationWithParams = pipe(\n    fetchSomething, // (id: number, from: string) => OR.ObservableResource<E, A>\n    OR.fetchToMutationEffect((s: QuoteState) => (quote): QuoteState => ({ ...s, something: c })),\n    MS.ctorMutationC('fetchSomethingMutation')\n)\n")),(0,o.kt)("p",null,"In ",(0,o.kt)("em",{parentName:"p"},"ReaderObservableResource"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { map } from 'rxjs/operators'\nimport * as ROR from 'mutoid/http/ReaderObservableResource'\nimport * as MS from 'mutoid/state'\n\ntype fetchQuoteMutationWithParams = (\n    d: Deps\n) => MS.Mutation<'fetchSomethingMutation', [id: number, from: string], QuoteState, QuoteState>\n\nexport const fetchQuoteMutationWithParams = pipe(\n    fetchSomething, // (id: number, from: string) => ROR.ReaderObservableResource<R, E, A>\n    ROR.fetchToMutationEffectR((s: QuoteState) => (quote): QuoteState => ({ ...s, something: c })),\n    MS.ctorMutationCR('fetchSomethingMutation')\n)\n")))}m.isMDXComponent=!0}}]);
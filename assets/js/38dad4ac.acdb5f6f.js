(self.webpackChunkmutoid_website=self.webpackChunkmutoid_website||[]).push([[597],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=c(n),d=o,f=l["".concat(p,".").concat(d)]||l[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=l;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},8417:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return l}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],s={},p="Upgrade to version 0.4",c={unversionedId:"migration/upgrade-to-0.4",id:"migration/upgrade-to-0.4",isDocsHomePage:!1,title:"Upgrade to version 0.4",description:"New peer dependency",source:"@site/docs/03-migration/upgrade-to-0.4.md",sourceDirName:"03-migration",slug:"/migration/upgrade-to-0.4",permalink:"/mutoid/docs/migration/upgrade-to-0.4",editUrl:"https://github.com/facile-it/mutoid/edit/master/website/docs/03-migration/upgrade-to-0.4.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"React",permalink:"/mutoid/docs/modules/react"},next:{title:"Changelog",permalink:"/mutoid/docs/changelog"}},u=[{value:"New peer dependency",id:"new-peer-dependency",children:[]},{value:"State management",id:"state-management",children:[]},{value:"Data fetching",id:"data-fetching",children:[{value:"Extract resource type form decoders",id:"extract-resource-type-form-decoders",children:[]},{value:"Create Observable resource from ajax",id:"create-observable-resource-from-ajax",children:[]},{value:"Fetcher to mutation effect",id:"fetcher-to-mutation-effect",children:[]},{value:"Resource fold",id:"resource-fold",children:[]}]}],m={toc:u};function l(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"upgrade-to-version-04"},"Upgrade to version 0.4"),(0,a.kt)("h2",{id:"new-peer-dependency"},"New peer dependency"),(0,a.kt)("p",null,"Now ",(0,a.kt)("inlineCode",{parentName:"p"},"fp-ts-rxjs")," is a peer dependency"),(0,a.kt)("h2",{id:"state-management"},"State management"),(0,a.kt)("p",null,"We removed the memoization in store ctor."),(0,a.kt)("p",null,"Now we recommend to use a lazy store like"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const appStore = () => MS.ctor({ name: 'appStore', initState: { userName: 'Marco' } })\n")),(0,a.kt)("p",null,"In any case you can still use a singleton store. The only difference is the ctor first argument"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// before\nconst appStore = MS.ctor(() => { name: 'appStore', initState: { userName: 'Marco' } })\n\n// after\nconst appStore = MS.ctor({ name: 'appStore', initState: { userName: 'Marco' } })\n")),(0,a.kt)("p",null,"And now when the store is built, it is no more lazy so you have to change some uses, for example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// before\nstore().state$.pipe(take(1), map(s => ...))\n\n// after\nstore.state$.pipe(take(1), map(s => ...))\n")),(0,a.kt)("p",null,"We added ",(0,a.kt)("inlineCode",{parentName:"p"},"mutoid/state/stores")," to populate the stores and mutations names using the module augmentation feature"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"declare module 'mutoid/state/stores' {\n    interface Stores {\n        appStore: 'mutation' | 'partialMutation'\n    }\n}\n\nconst appStore = MS.ctor(() => ({\n    name: 'appStore', // you can remove as const\n    // nothing changed ...\n}))\n\nconst mutation = MS.ctorMutation(\n    'mutation' // you can remove as const\n    // nothing changed ...\n)\n")),(0,a.kt)("p",null,"This is useful to have the correct inference in the store notifier\nIn any case, if you don't declare anything there is a fallback to string"),(0,a.kt)("h2",{id:"data-fetching"},"Data fetching"),(0,a.kt)("p",null,"The http module has been splitted into 3 modules: ",(0,a.kt)("inlineCode",{parentName:"p"},"ReaderObservableResource"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ObservableResource")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Resource"),". Three data structures that implement an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"Functor"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Apply"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Bifunctor"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Applicative"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Monad")," (and ",(0,a.kt)("inlineCode",{parentName:"p"},"MonadObservable")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"ObservableResource")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ReaderObservableResource"),")"),(0,a.kt)("h3",{id:"extract-resource-type-form-decoders"},"Extract resource type form decoders"),(0,a.kt)("p",null,"Before"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import * as t from 'io-ts'\nimport * as MH from 'mutoid/http'\n\nexport const somethingDecoders = {\n    200: t.array(t.string).decode,\n    400: t.string.decode,\n}\n\ntype somethingResource = MH.Resource<typeof somethingDecoders>\n")),(0,a.kt)("p",null,"After"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import * as t from 'io-ts'\nimport * as RES from 'mutoid/http/Resource'\n\nexport const somethingDecoders = {\n    200: t.array(t.string).decode,\n    400: t.string.decode,\n}\n\ntype somethingResource = RES.ResourceTypeOf<typeof somethingDecoders>\n")),(0,a.kt)("h3",{id:"create-observable-resource-from-ajax"},"Create Observable resource from ajax"),(0,a.kt)("p",null,"Before"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import * as t from 'io-ts'\nimport { ajax } from 'rxjs/ajax'\nimport * as MH from 'mutoid/http'\n\nexport const somethingDecoders = {\n    200: t.array(t.string).decode,\n    400: t.string.decode,\n}\n\ntype somethingResource = MH.Resource<typeof somethingDecoders>\n\nconst fetchSomething = (id: number, from: string) =>\n    MH.ajaxToResource(ajax(`https://api.io?id=${id}&from=${from}`), somethingDecoders)\n")),(0,a.kt)("p",null,"After"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import * as t from 'io-ts'\nimport { ajax } from 'rxjs/ajax'\nimport * as ROR from 'mutoid/http/ReaderObservableResource'\nimport * as OR from 'mutoid/http/ObservableResource'\nimport * as RES from 'mutoid/http/Resource'\n\nexport const somethingDecoders = {\n    200: t.array(t.string).decode,\n    400: t.string.decode,\n}\n\nexport interface Deps {\n    ajax: typeof ajax\n}\n\ntype somethingResource = RES.ResourceTypeOf<typeof somethingDecoders>\n\nconst fetchSomething = (id: number, from: string) => (deps: Deps) =>\n    OR.fromAjax(deps.ajax(`https://api.io?id=${id}&from=${from}`), somethingDecoders)\n\n// or\n\nexport const fetchSomething = (id: number, from: string) =>\n    pipe(\n        ROR.askTypeOf<Deps, typeof somethingDecoders>(),\n        ROR.chainW(deps =>\n            ROR.fromAjax(\n                deps.ajax(`https://ron-swanson-quotes.herokuapp.com/v2/quotes?id=${id}&from=${from}`),\n                somethingDecoders\n            )\n        )\n    )\n")),(0,a.kt)("h3",{id:"fetcher-to-mutation-effect"},"Fetcher to mutation effect"),(0,a.kt)("p",null,"Before"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { map } from 'rxjs/operators'\nimport * as MH from 'mutoid/http'\nimport * as MS from 'mutoid/state'\n\nconst fetchSomethingMutation = () =>\n    MS.ctorMutation(\n        'fetchSomethingMutation' as const,\n        MH.resourceFetcherToMutationEffect(fetchSomething, (o, s: state) => o.pipe(map(c => ({ ...s, something: c }))))\n    )\n")),(0,a.kt)("p",null,"After"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import * as OR from 'mutoid/http/ObservableResource'\nimport * as ROR from 'mutoid/http/ReaderObservableResource'\nimport { pipe } from 'fp-ts/function'\n\n// if fetchSomething = (params) => ObservableResource\n// return () => Mutation\n\nconst fetchSomethingMutation = () =>\n    pipe(\n        fetchSomething,\n        OR.fetchToMutationEffect((s: state) => c => ({ ...s, something: c })),\n        MS.ctorMutationC('fetchSomethingMutation')\n    )\n\n// if fetchSomething = (params) => ReaderObservableResource\n// return (deps) => Mutation\n\nconst fetchSomethingMutation = () =>\n    pipe(\n        fetchSomething,\n        ROR.fetchToMutationEffectR((s: state) => c => ({ ...s, something: c })),\n        MS.ctorMutationCR('fetchSomethingMutation')\n    )\n")),(0,a.kt)("h3",{id:"resource-fold"},"Resource fold"),(0,a.kt)("p",null,"Before"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import * as MH from 'mutoid/http'\nimport { pipe } from 'fp-ts/function'\n\nconst result = pipe(\n    userResource,\n    MH.resourceFold({\n        onInit: () => 'loading...',\n        onSubmitted: () => 'loading...',\n        onDone: r => r.payload.name,\n        onFail: e => e.error.type,\n    })\n)\n")),(0,a.kt)("p",null,"After"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import * as RES from 'mutoid/http/Resource'\nimport { pipe } from 'fp-ts/function'\n\nconst result = pipe(\n    userResource,\n    RES.matchD({\n        onInit: () => 'loading...',\n        onSubmitted: () => 'loading...',\n        onDone: r => r.payload.name,\n        onFail: e => e.error.type,\n    })\n)\n\n// or\n\nconst result = pipe(\n    userResource,\n    RES.matchD({\n        onPending: () => 'loading...',\n        onDone: r => r.payload.name,\n        onFail: e => e.type,\n    })\n)\n\n// or\n\nconst result = pipe(userResource, RES.match(onInit, onSubmitted, onDone, onFail))\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ResourceDone")," internal structure has been changed"),(0,a.kt)("p",null,"Before"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ResourceDone<S, P> {\n    readonly tag: 'done'\n    readonly status: S\n    readonly payload: P\n}\n")),(0,a.kt)("p",null,"After"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ResourceData<S, P> {\n    readonly status: S\n    readonly payload: P\n}\n\nexport interface ResourceDone<D> {\n    readonly _tag: 'done'\n    readonly data: D\n}\n")),(0,a.kt)("p",null,"The discriminator now is ",(0,a.kt)("inlineCode",{parentName:"p"},"_tag")))}l.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmutoid_website=self.webpackChunkmutoid_website||[]).push([[678],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=p(a),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(f,c(c({ref:t},s),{},{components:a})):n.createElement(f,c({ref:t},s))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var p=2;p<o;p++)c[p]=a[p];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5518:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var n=a(2122),r=a(9756),o=(a(7294),a(3905)),c=["components"],i={sidebar_label:"Fetch factory & cache",sidebar_position:3},l="Fetch factory & cache",p={unversionedId:"modules/http/fetch-factory-and-cache",id:"modules/http/fetch-factory-and-cache",isDocsHomePage:!1,title:"Fetch factory & cache",description:"`ts",source:"@site/docs/02-modules/01-http/03-fetch-factory-and-cache.md",sourceDirName:"02-modules/01-http",slug:"/modules/http/fetch-factory-and-cache",permalink:"/mutoid/docs/modules/http/fetch-factory-and-cache",editUrl:"https://github.com/facile-it/mutoid/edit/master/website/docs/02-modules/01-http/03-fetch-factory-and-cache.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Fetch factory & cache",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Resource",permalink:"/mutoid/docs/modules/http/resource"},next:{title:"Cache pool adapters",permalink:"/mutoid/docs/modules/http/cache-pool-adapters"}},s=[{value:"fetchFactory",id:"fetchfactory",children:[]},{value:"fetchCacheableFactory",id:"fetchcacheablefactory",children:[]}],u={toc:s};function d(e){var t=e.components,a=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fetch-factory--cache"},"Fetch factory & cache"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import * as RESFF from 'mutoid/http/resourceFetchFactory'\n")),(0,o.kt)("h2",{id:"fetchfactory"},"fetchFactory"),(0,o.kt)("p",null,"This function helps to build a ",(0,o.kt)("inlineCode",{parentName:"p"},"ReaderObservableResource")," from an endpoint request, decoders and a list of success codes."),(0,o.kt)("p",null,"Where:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"EndpointRequest")," is an extension of ",(0,o.kt)("inlineCode",{parentName:"li"},"rxJs")," ",(0,o.kt)("inlineCode",{parentName:"li"},"AjaxRequest")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"decoders")," is a lazy map, the same that you could use in ",(0,o.kt)("a",{parentName:"li",href:"./resource#fromajax"},"fromAjax")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"successCodes")," a list of status codes")),(0,o.kt)("p",null,"The main differences from ",(0,o.kt)("a",{parentName:"p",href:"./resource#fromajax"},"fromAjax")," are the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Fail")," type is always ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceBad")," (i.e. a union of ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceBadFail")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceBadRejected"),")."),(0,o.kt)("p",{parentName:"li"},"When the original resource is ",(0,o.kt)("inlineCode",{parentName:"p"},"Fail"),", it always returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceBadFail"),". Otherwise, if you want to catch a bad request (e.g. in a form post), you can add a 4","*","*"," status code to your decoders map and omit it from the ",(0,o.kt)("inlineCode",{parentName:"p"},"successCodes")," list; in this way it will always be returned as ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceBadRejected"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Done")," type is a union of ",(0,o.kt)("inlineCode",{parentName:"p"},"RES.ResourceData<S, P>"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface ResourceData<S, P> {\n    readonly status: S\n    readonly payload: P\n}\n")),(0,o.kt)("p",{parentName:"li"},"where ",(0,o.kt)("inlineCode",{parentName:"p"},"S")," can be one of the status codes in the ",(0,o.kt)("inlineCode",{parentName:"p"},"successCodes")," list."),(0,o.kt)("p",{parentName:"li"},"The list of success codes is useful when, for example, an API returns 404 for an empty list or a not existing resource but you don't want to receive a ",(0,o.kt)("inlineCode",{parentName:"p"},"Fail")," resource. In that case, the type of ",(0,o.kt)("inlineCode",{parentName:"p"},"Done")," could be something like this:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type Done = RES.ResourceData<200, A> | RES.ResourceData<404, B>\n")),(0,o.kt)("p",{parentName:"li"},"where ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," are inferred from the decoders map."))),(0,o.kt)("h2",{id:"fetchcacheablefactory"},"fetchCacheableFactory"),(0,o.kt)("p",null,"This function has the same behavior of the ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchFactory")," function, but the ",(0,o.kt)("em",{parentName:"p"},"EndpointRequest")," in case of ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," can accept ",(0,o.kt)("inlineCode",{parentName:"p"},"appCacheTtl"),"."),(0,o.kt)("p",null,"In order to manage the cache you have to inject a ",(0,o.kt)("inlineCode",{parentName:"p"},"CachePool")," service as a dependency.\nIf you want you can develop your own service. Otherwise, you can use one of ",(0,o.kt)("a",{parentName:"p",href:"./cache-pool-adapters"},"these adapters"),"."))}d.isMDXComponent=!0}}]);
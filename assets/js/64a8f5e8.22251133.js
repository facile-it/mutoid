"use strict";(self.webpackChunkmutoid_website=self.webpackChunkmutoid_website||[]).push([[678],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return f}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),l=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(a),f=n,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return a?r.createElement(m,c(c({ref:t},p),{},{components:a})):r.createElement(m,c({ref:t},p))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,c=new Array(o);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var l=2;l<o;l++)c[l]=a[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5518:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=a(2122),n=a(9756),o=(a(7294),a(3905)),c=["components"],i={sidebar_label:"Fetch factory & cache",sidebar_position:3},s="Fetch factory & cache",l={unversionedId:"modules/http/fetch-factory-and-cache",id:"modules/http/fetch-factory-and-cache",isDocsHomePage:!1,title:"Fetch factory & cache",description:"`ts",source:"@site/docs/02-modules/01-http/03-fetch-factory-and-cache.md",sourceDirName:"02-modules/01-http",slug:"/modules/http/fetch-factory-and-cache",permalink:"/mutoid/docs/modules/http/fetch-factory-and-cache",editUrl:"https://github.com/facile-it/mutoid/edit/master/website/docs/02-modules/01-http/03-fetch-factory-and-cache.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Fetch factory & cache",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Resource",permalink:"/mutoid/docs/modules/http/resource"},next:{title:"Cache pool adapters",permalink:"/mutoid/docs/modules/http/cache-pool-adapters"}},p=[{value:"fetchFactory",id:"fetchfactory",children:[]},{value:"fetchCacheableFactory",id:"fetchcacheablefactory",children:[]}],u={toc:p};function d(e){var t=e.components,a=(0,n.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fetch-factory--cache"},"Fetch factory & cache"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import * as RESFF from 'mutoid/http/resourceFetchFactory'\n")),(0,o.kt)("h2",{id:"fetchfactory"},"fetchFactory"),(0,o.kt)("p",null,"This function helps to build a ",(0,o.kt)("inlineCode",{parentName:"p"},"ReaderObservableResource")," from an endpoint request, decoders and a list of success codes."),(0,o.kt)("p",null,"where:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"EndpointRequest")," is an extension of ",(0,o.kt)("inlineCode",{parentName:"li"},"rxJs")," ",(0,o.kt)("inlineCode",{parentName:"li"},"AjaxRequest")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"decoders")," is a lazy map, the same that you could use in ",(0,o.kt)("a",{parentName:"li",href:"./resource#fromajax"},"fromAjax")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"successCodes")," a list of status codes")),(0,o.kt)("p",null,"The principal differences from ",(0,o.kt)("a",{parentName:"p",href:"./resource#fromajax"},"fromAjax")," are these:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Fail type is always ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceBad")," i.e. a union of ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceBadFail")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceBadRejected"),"."),(0,o.kt)("p",{parentName:"li"},"When the original resource is Fail, it always returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceBadFail"),". Otherwise, if you want to catch a bad request (e.g. in a form post), you can add a 4","*","*"," status code to your decoders map and omit it from the ",(0,o.kt)("inlineCode",{parentName:"p"},"successCodes")," list; it will always be returned as ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceBadRejected"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Done type is a union of ",(0,o.kt)("inlineCode",{parentName:"p"},"RES.ResourceData<S, P>")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface ResourceData<S, P> {\n    readonly status: S\n    readonly payload: P\n}\n")),(0,o.kt)("p",{parentName:"li"},"Where S can be one of the status codes in the ",(0,o.kt)("inlineCode",{parentName:"p"},"successCodes")," list"),(0,o.kt)("p",{parentName:"li"},"The list of success codes is useful when, for example, an API returns 404 for an empty list or a not existing resource but you don't want to receive a fail resource. In that case the type of Done could be something like this:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type Done = RES.ResourceData<200, A> | RES.ResourceData<404, B>\n")),(0,o.kt)("p",{parentName:"li"},"where ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," are inferred from the decoders map"))),(0,o.kt)("h2",{id:"fetchcacheablefactory"},"fetchCacheableFactory"),(0,o.kt)("p",null,"This function has the same behavior of the ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchFactory")," function but the ",(0,o.kt)("em",{parentName:"p"},"EndpointRequest")," in case of ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," can accept ",(0,o.kt)("inlineCode",{parentName:"p"},"appCacheTtl")),(0,o.kt)("p",null,"In order to manage the cache you have to inject as a dependency a ",(0,o.kt)("inlineCode",{parentName:"p"},"CachePool")," service.\nIf you want you can develop your service or you can use one of ",(0,o.kt)("a",{parentName:"p",href:"./cache-pool-adapters"},"these adapters")))}d.isMDXComponent=!0}}]);